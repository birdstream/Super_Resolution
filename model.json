{"networkName": "super4xres_v3", "networkMeta": {"openStatistics": true, "openTest": false, "hideModel": false, "hideStatistics": false, "hideTest": false, "zoom": 1, "zoomSnapshot": 1, "usingWeights": false, "netMode": "edit", "coreStatus": {"Status": "Finished", "CPU": 11.7, "Epoch": 1, "GPU": 0, "Iterations": 126000, "Memory": 65.7, "Progress": 1, "Training_Duration": 211455.91651536385}, "chartsRequest": {"timerID": null, "waitGlobalEvent": true, "doRequest": 280097, "showCharts": 280078}, "datasetSettings": {"randomizedPartitions": true, "partitions": [70, 20, 10], "featureSpecs": {"input": {"csv_path": "/home/joakim/faceset.csv.old", "iotype": "Input", "datatype": "image", "preprocessing": {"normalize": {"type": "min-max"}}}, "target": {"csv_path": "/home/joakim/faceset.csv.old", "iotype": "Target", "datatype": "image", "preprocessing": {"normalize": {"type": "min-max"}}}}}, "trainingSettings": {"Epochs": "1", "Batch_size": "4", "Shuffle": true, "Loss": "Quadratic", "LossOptions": [{"text": "Cross-Entropy", "value": "Cross-Entropy"}, {"text": "Quadratic", "value": "Quadratic"}, {"text": "Dice", "value": "Dice"}], "Learning_rate": 0.0001, "Optimizer": "ADAM", "OptimizerOptions": [{"text": "ADAM", "value": "ADAM"}, {"text": "SGD", "value": "SGD"}, {"text": "Adagrad", "value": "Adagrad"}, {"text": "RMSprop", "value": "RMSprop"}], "Beta1": 0.9, "Beta2": 0.999, "Momentum": 0, "Centered": false, "AutoCheckpoint": false}}, "networkElementList": {"0": {"layerId": "0", "copyId": null, "copyContainerElement": null, "layerName": "Input_1", "layerType": "IoInput", "layerSettings": {"Type": "IoInput", "FeatureName": "input", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": [{"type": "file", "path": "/home/joakim/faceset.csv"}], "Partition_list": [[70, 20, 10]]}}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 60}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "IoInput", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16323444863140": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344517763", "dst_var": "input"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "IoInput", "FeatureName": "input", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": []}}}, "6": {"layerId": "6", "copyId": null, "copyContainerElement": null, "layerName": "Target_1", "layerType": "IoOutput", "layerSettings": {"Type": "IoInput", "FeatureName": "target", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": [{"type": "file", "path": "/home/joakim/faceset.csv"}], "Partition_list": [[70, 20, 10]]}}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 1380}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "IoOutput", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323444863340": {"name": "input", "reference_var_id": "16323449188980", "reference_layer_id": "1632344918897", "isDefault": true}}, "outputs": {}, "forward_connections": [], "backward_connections": [{"src_id": "1632344918897", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "IoInput", "FeatureName": "target", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": []}}}, "1632344517763": {"layerId": "1632344517763", "copyId": null, "copyContainerElement": null, "layerName": "Rescale_1", "layerType": "Other", "layerSettings": {"width": "56", "height": "56"}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class ProcessRescale_Rescale_1Keras(tf.keras.layers.Layer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and rescales it \"\"\"\n        \n                            \n               \n        input_ = inputs['input']\n        if training:\n            output = tf.image.resize(input_, [56, 56])\n        else:\n            output = input_\n        \n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\t\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Return`:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n        \n\nclass ProcessRescale_Rescale_1(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=ProcessRescale_Rescale_1Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 270}, "tutorialId": "", "OutputDim": "56x56x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "ProcessRescale", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323445177630": {"name": "input", "reference_var_id": "16323444863140", "reference_layer_id": "0", "isDefault": true}}, "outputs": {"16323445177640": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632932988960", "dst_var": "input"}], "backward_connections": [{"src_id": "0", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0, "initialSettings": {"width": 40, "height": 30}}, "1632344701770": {"layerId": "1632344701770", "copyId": null, "copyContainerElement": null, "layerName": "Upscale_bicubic", "layerType": "Other", "layerSettings": null, "layerSettingsTabName": "Code", "layerCode": {"Output": "class LayerCustom_Upscale_bicubicKeras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and one-hot encodes it \"\"\"\n        \n                            \n                \n        input_ = inputs['input']\n        if training:\n            output = tf.image.resize(input_, [224, 224], method='bicubic')\n        else:\n            output = input_\n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return tf.constant(0), tf.constant(0)\n\n\nclass LayerCustom_Upscale_bicubic(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=LayerCustom_Upscale_bicubicKeras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 840}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "LayerCustom", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323447017710": {"name": "input", "reference_var_id": "16329329889600", "reference_layer_id": "1632932988960", "isDefault": true}}, "outputs": {"16323447017710": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344918897", "dst_var": "input"}], "backward_connections": [{"src_id": "1632932988960", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0}, "1632344918897": {"layerId": "1632344918897", "copyId": null, "copyContainerElement": null, "layerName": "UNet_1", "layerType": "Other", "layerSettings": {"filter_num": [64, 128, 256, 512], "n_labels": "3", "stack_num_down": "4", "stack_num_up": "4", "activation": "ReLU", "output_activation": "Sigmoid", "batch_norm": false, "pool": "max", "unpool": false, "backbone": false, "backbone_weights": true, "freeze_backbone": true, "freeze_batch_norm": true, "attention": false, "atten_activation": "ReLU", "atten_type": "add"}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class UNet_UNet_1Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def __init__(self):\n        super().__init__()\n        self._variables = {}\n\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and sends it as input to the U-Net model.\"\"\"\n        \n                            \n\n        input_ = inputs['input']\n        output = self.unet(input_, training=training)\n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def build(self, input_shape):\n        \"\"\" Called by the Keras framework upon the first invocation of the call method \"\"\"\n        input_shape_ = input_shape['input']\n        if len(input_shape_) > 3:\n            input_shape_ = input_shape_[1:]\n\n        filter_num = (64, 128, 256, 512, 1024, 2048)\n        n_labels = 3\n        stack_num_down = 2\n        stack_num_up = 2\n        activation = 'ReLU'\n        output_activation = 'Sigmoid'\n        batch_norm = False\n        pool = 'max'\n        unpool = False\n        backbone = None\n        backbone_weights = None\n        freeze_backbone = False\n        freeze_batch_norm = False\n        \n        name = 'UNet_1'\n\n        self.unet = unet_models.unet_2d(input_size=input_shape_, filter_num=filter_num, n_labels=n_labels,\n                                    stack_num_down=stack_num_down, stack_num_up=stack_num_up, activation=activation,\n                                    output_activation=output_activation, batch_norm=batch_norm, pool=pool,\n                                    unpool=unpool, backbone=backbone, weights=backbone_weights,\n                                    freeze_backbone=freeze_backbone, freeze_batch_norm=freeze_batch_norm, name='unet')\n\n\n        self.kernel = self.unet.layers[-2].weights[0]\n        self.bias = self.unet.layers[-2].bias\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n\n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return self.kernel, self.bias\n\nclass UNet_UNet_1(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=UNet_UNet_1Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 1200}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "UNet", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323449188980": {"name": "input", "reference_var_id": "16323447017710", "reference_layer_id": "1632344701770", "isDefault": true}}, "outputs": {"16323449188980": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "6", "dst_var": "input"}], "backward_connections": [{"src_id": "1632344701770", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0, "initialSettings": {"filter_num": [64, 128, 256, 512], "n_labels": 1, "stack_num_down": 2, "stack_num_up": 2, "activation": "ReLU", "output_activation": "Softmax", "batch_norm": false, "pool": "max", "unpool": "bilinear", "backbone": false, "backbone_weights": true, "freeze_backbone": true, "freeze_batch_norm": true, "attention": false, "atten_activation": "ReLU", "atten_type": "add"}}, "1632932988960": {"layerId": "1632932988960", "copyId": null, "copyContainerElement": null, "layerName": "LayerCustom_3", "layerType": "Other", "layerSettingsTabName": "Code", "layerCode": {"Output": "class LayerCustom_LayerCustom_3Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and one-hot encodes it \"\"\"\n        \n                            \n                \n        input_ = inputs['input']\n        if training:\n            output = tf.map_fn(fn=lambda img: tf.image.random_jpeg_quality(image=img, min_jpeg_quality=70, max_jpeg_quality=100), elems=input_)\n        else:\n            output = input_\n        \n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return tf.constant(0), tf.constant(0)\n\n\nclass LayerCustom_LayerCustom_3(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=LayerCustom_LayerCustom_3Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 480}, "tutorialId": "", "OutputDim": "56x56x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "LayerCustom", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16329329889600": {"name": "input", "reference_var_id": "16323445177640", "reference_layer_id": "1632344517763", "isDefault": true}}, "outputs": {"16329329889600": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344701770", "dst_var": "input"}], "backward_connections": [{"src_id": "1632344517763", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0}}, "networkRootFolder": "/home/joakim/super_res4x_v3", "networkSnapshots": [{"0": {"layerId": "0", "copyId": null, "copyContainerElement": null, "layerName": "Input_1", "layerType": "IoInput", "layerSettings": {"Type": "IoInput", "FeatureName": "input", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": [{"type": "file", "path": "/home/joakim/faceset.csv"}], "Partition_list": [[70, 20, 10]]}}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 60}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "IoInput", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {}, "outputs": {"16323444863140": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344517763", "dst_var": "input"}], "backward_connections": [], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "IoInput", "FeatureName": "input", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": []}}}, "6": {"layerId": "6", "copyId": null, "copyContainerElement": null, "layerName": "Target_1", "layerType": "IoOutput", "layerSettings": {"Type": "IoInput", "FeatureName": "target", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": [{"type": "file", "path": "/home/joakim/faceset.csv"}], "Partition_list": [[70, 20, 10]]}}, "layerSettingsTabName": "Settings", "layerCode": null, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": true, "position": {"top": 60, "left": 1380}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "IoOutput", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323444863340": {"name": "input", "reference_var_id": "16323449188980", "reference_layer_id": "1632344918897", "isDefault": true}}, "outputs": {}, "forward_connections": [], "backward_connections": [{"src_id": "1632344918897", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": false, "chartDataIsLoading": 0, "initialSettings": {"Type": "IoInput", "FeatureName": "target", "FilePath": "/home/joakim/faceset.csv", "DataType": "image", "testInfoIsInput": true, "accessProperties": {"Sources": []}}}, "1632344517763": {"layerId": "1632344517763", "copyId": null, "copyContainerElement": null, "layerName": "Rescale_1", "layerType": "Other", "layerSettings": {"width": "56", "height": "56"}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class ProcessRescale_Rescale_1Keras(tf.keras.layers.Layer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and rescales it \"\"\"\n        \n                            \n               \n        input_ = inputs['input']\n        if training:\n            output = tf.image.resize(input_, [56, 56])\n        else:\n            output = input_\n        \n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\t\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Return`:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n        \n\nclass ProcessRescale_Rescale_1(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=ProcessRescale_Rescale_1Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 270}, "tutorialId": "", "OutputDim": "56x56x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "ProcessRescale", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323445177630": {"name": "input", "reference_var_id": "16323444863140", "reference_layer_id": "0", "isDefault": true}}, "outputs": {"16323445177640": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632932988960", "dst_var": "input"}], "backward_connections": [{"src_id": "0", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0, "initialSettings": {"width": 40, "height": 30}}, "1632344701770": {"layerId": "1632344701770", "copyId": null, "copyContainerElement": null, "layerName": "Upscale_bicubic", "layerType": "Other", "layerSettings": null, "layerSettingsTabName": "Code", "layerCode": {"Output": "class LayerCustom_Upscale_bicubicKeras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and one-hot encodes it \"\"\"\n        \n                            \n                \n        input_ = inputs['input']\n        if training:\n            output = tf.image.resize(input_, [224, 224], method='bicubic')\n        else:\n            output = input_\n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return tf.constant(0), tf.constant(0)\n\n\nclass LayerCustom_Upscale_bicubic(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=LayerCustom_Upscale_bicubicKeras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 840}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "LayerCustom", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323447017710": {"name": "input", "reference_var_id": "16329329889600", "reference_layer_id": "1632932988960", "isDefault": true}}, "outputs": {"16323447017710": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344918897", "dst_var": "input"}], "backward_connections": [{"src_id": "1632932988960", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0}, "1632344918897": {"layerId": "1632344918897", "copyId": null, "copyContainerElement": null, "layerName": "UNet_1", "layerType": "Other", "layerSettings": {"filter_num": [64, 128, 256, 512], "n_labels": "3", "stack_num_down": "4", "stack_num_up": "4", "activation": "ReLU", "output_activation": "Sigmoid", "batch_norm": false, "pool": "max", "unpool": false, "backbone": false, "backbone_weights": true, "freeze_backbone": true, "freeze_batch_norm": true, "attention": false, "atten_activation": "ReLU", "atten_type": "add"}, "layerSettingsTabName": "Settings", "layerCode": {"Output": "class UNet_UNet_1Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def __init__(self):\n        super().__init__()\n        self._variables = {}\n\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and sends it as input to the U-Net model.\"\"\"\n        \n                            \n\n        input_ = inputs['input']\n        output = self.unet(input_, training=training)\n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def build(self, input_shape):\n        \"\"\" Called by the Keras framework upon the first invocation of the call method \"\"\"\n        input_shape_ = input_shape['input']\n        if len(input_shape_) > 3:\n            input_shape_ = input_shape_[1:]\n\n        filter_num = (64, 128, 256, 512, 1024, 2048)\n        n_labels = 3\n        stack_num_down = 2\n        stack_num_up = 2\n        activation = 'ReLU'\n        output_activation = 'Sigmoid'\n        batch_norm = False\n        pool = 'max'\n        unpool = False\n        backbone = None\n        backbone_weights = None\n        freeze_backbone = False\n        freeze_batch_norm = False\n        \n        name = 'UNet_1'\n\n        self.unet = unet_models.unet_2d(input_size=input_shape_, filter_num=filter_num, n_labels=n_labels,\n                                    stack_num_down=stack_num_down, stack_num_up=stack_num_up, activation=activation,\n                                    output_activation=output_activation, batch_norm=batch_norm, pool=pool,\n                                    unpool=unpool, backbone=backbone, weights=backbone_weights,\n                                    freeze_backbone=freeze_backbone, freeze_batch_norm=freeze_batch_norm, name='unet')\n\n\n        self.kernel = self.unet.layers[-2].weights[0]\n        self.bias = self.unet.layers[-2].bias\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n\n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return self.kernel, self.bias\n\nclass UNet_UNet_1(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=UNet_UNet_1Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 1200}, "tutorialId": "", "OutputDim": "224x224x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "UNet", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16323449188980": {"name": "input", "reference_var_id": "16323447017710", "reference_layer_id": "1632344701770", "isDefault": true}}, "outputs": {"16323449188980": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "6", "dst_var": "input"}], "backward_connections": [{"src_id": "1632344701770", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0, "initialSettings": {"filter_num": [64, 128, 256, 512], "n_labels": 1, "stack_num_down": 2, "stack_num_up": 2, "activation": "ReLU", "output_activation": "Softmax", "batch_norm": false, "pool": "max", "unpool": "bilinear", "backbone": false, "backbone_weights": true, "freeze_backbone": true, "freeze_batch_norm": true, "attention": false, "atten_activation": "ReLU", "atten_type": "add"}}, "1632932988960": {"layerId": "1632932988960", "copyId": null, "copyContainerElement": null, "layerName": "LayerCustom_3", "layerType": "Other", "layerSettingsTabName": "Code", "layerCode": {"Output": "class LayerCustom_LayerCustom_3Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):\n    def call(self, inputs, training=True):\n        \"\"\" Takes a tensor and one-hot encodes it \"\"\"\n        \n                            \n                \n        input_ = inputs['input']\n        if training:\n            output = tf.map_fn(fn=lambda img: tf.image.random_jpeg_quality(image=img, min_jpeg_quality=70, max_jpeg_quality=100), elems=input_)\n        else:\n            output = input_\n        \n            \n        self._outputs = {            \n            'output': output,\n            'preview': output,\n        }\n                            \n\n        return self._outputs\n\n    def get_config(self):\n        \"\"\"Any variables belonging to this layer that should be rendered in the frontend.\n        \n        Returns:\n            A dictionary with tensor names for keys and picklable for values.\n        \"\"\"\n        return {}\n\n    @property\n    def visualized_trainables(self):\n        \"\"\" Returns two tf.Variables (weights, biases) to be visualized in the frontend \"\"\"\n        return tf.constant(0), tf.constant(0)\n\n\nclass LayerCustom_LayerCustom_3(Tf2xLayer):\n    def __init__(self):\n        super().__init__(\n            keras_class=LayerCustom_LayerCustom_3Keras\n        )"}, "layerCodeError": null, "layerNone": false, "layerMeta": {"isInvisible": false, "isLock": false, "isSelected": false, "position": {"top": 60, "left": 480}, "tutorialId": "", "OutputDim": "56x56x3", "InputDim": "", "layerContainerName": "", "layerBgColor": "", "containerDiff": {"top": 0, "left": 0}}, "chartData": {}, "checkpoint": [null, "/home/joakim/super_res4x_v3"], "endPoints": [], "componentName": "LayerCustom", "connectionOut": [], "connectionIn": [], "connectionArrow": [], "visited": true, "inputs": {"16329329889600": {"name": "input", "reference_var_id": "16323445177640", "reference_layer_id": "1632344517763", "isDefault": true}}, "outputs": {"16329329889600": {"name": "output", "reference_var": "output"}}, "forward_connections": [{"src_var": "output", "dst_id": "1632344701770", "dst_var": "input"}], "backward_connections": [{"src_id": "1632344517763", "src_var": "output", "dst_var": "input"}], "previewVariable": "output", "previewVariableList": [], "isTrained": false, "isSettingsLocked": true, "chartDataIsLoading": 0}}], "chartDataIsLoading": 0, "isChecked": true, "apiMeta": {"model_id": 234, "project": 1, "name": "super4xres_v3", "created": "2021-10-04T15:58:55.390779Z", "updated": "2021-10-08T11:28:08.872639Z", "saved_by": "", "location": "/home/joakim/super_res4x_v3", "saved_version_location": ""}, "networkID": 234}